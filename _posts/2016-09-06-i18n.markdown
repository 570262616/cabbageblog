---
layout: post
title:  "iOS应用内切换语言"
date:   2016-11-07 14:25:23 +0800
description: 
categories: Home
---

iOS应用内切换语言

---

iOS国际化方案, 其实这个网上随便搜搜都是铺天盖地的文章.
无非就是勾选需要国际化的语言, 项目通篇埋点, 然后导出`xliff`文件交给翻译人员进行翻译后再导回项目就完事了.

但是这里的痛点其实当一个已经迭代了很多版本, 但是从来没有考虑过国际化埋点, 现在需要进行国际化的项目, 如何对项目中已有的String进行国际化埋点. SB/Xib还好说, 勾选一下语言就自己完成了对应的`key/value`的设置. 但是那些代码写的字符串应该怎么整呢, 一个一个文件打开进行替换? 这太low了.

其实解决办法很简单, 一个正则就搞定了. `("[^"]*[a-z]+[^" ]*?")s*`, 因为我们项目是全英文的, 所以匹配a-z就可以了. 如果你的项目是中文字符串, 那么只要改一下匹配规则`("[^"]*[u4E00-u9FA5]+[^" ]*?")s*`就ok了. 如果是OC的项目, 那么再加上一个`@`符号可以更准确的匹配`(@"[^"]*[u4E00-u9FA5]+[^" ]*?")s*`. 

试一下, 是不是项目中几乎所有的字符串全部搜出来了, 搜出来下一步那么就是进行替换了, 既然搜索是自动的了, 那么替换是否可以呢, 答案是肯定的, 请看下图:
![Image](http://www.cabbage.space/assets/images/i18n.png)
只需要用`NSLocalizedString($1, tableName:$1, comment:$1)`就可以了, 其中`$1`表示用会用当前搜的key来填充.

现在是不是很方便了? 点一下鼠标, 替换一个字符串, 点两下鼠标, 替换两个字符串. 国际化埋点, so easy!!!

不过这里需要注意的一个点就是, 点之前还得去看一下替换的是什么, 因为有的字符串是不需要替换的.

经过配置 -> 埋点 -> 导出 -> 翻译 -> 导回. 项目国际化工作的做完了. 

下面说说热切换, 其实没啥说的, 100行代码就写完了.

```swift
class Languager: NSObject {
    
    fileprivate var _currentLanguage:String?
    //当前语言Bundle
    internal var currentLanguageBundle:Bundle?
    
    private var developmentLanguage: String {
        guard let languageString = Bundle.main.infoDictionary?[kCFBundleDevelopmentRegionKey as String] as? String else {
            return "en"
        }
        return languageString
    }
    
    private var userSettingLanguage: String? {
        return UserDefaults.standard.string(forKey: kUserLanguageKey)
    }
    
    private var preferredLanguage: String? {
        return NSLocale.current.languageCode
    }
    
    static let standardLanguager = Languager()
    
    // 当前语言获取与切换
    var currentLanguage:String? {
        get{
            if _currentLanguage == nil {
                _currentLanguage = userSettingLanguage ?? developmentLanguage
            }
            return _currentLanguage
        }
        set{
            guard _currentLanguage != newValue else { return }
            
            if let path = Bundle.main.path(forResource: newValue, ofType: "lproj"), let bundle = Bundle(path:path) {
                _currentLanguage = newValue
                currentLanguageBundle = bundle
            } else { //如果不支持当前语言则加载info中Localization native development region中的值的lporj
                guard let path = Bundle.main.path(forResource: developmentLanguage, ofType: "lproj" ) else {
                    return
                }
                currentLanguageBundle = Bundle(path: path)
                _currentLanguage = developmentLanguage
            }
            let def = UserDefaults.standard
            def.setValue(_currentLanguage, forKey:kUserLanguageKey)
            def.synchronize()
            
            Bundle.main.onLanguage()
        }
    }
    
    //初始化
    func initialize() {
        currentLanguage = userSettingLanguage ?? preferredLanguage
    }
}

extension Languager {
    
    struct availableLanguageIdentifier {
        static let thai = "th"
        static let malay = "ms"
        static let english = "en"
        static let indonesian = "id"
    }
    
    func displayNameForLanguage(_ language: String) -> String {
        
        let locale = NSLocale(localeIdentifier: language)
        if let displayName = locale.displayName(forKey: NSLocale.Key.languageCode, value: language) {
            return displayName
        }
        return ""
    }
    
    func switchLanguage(_ language: String) {
        currentLanguage = language
        AppDelegate.current.loadHomeWhenCountryAvailable()
    }
}

class BundleEx: Bundle {
    
    override func localizedString(forKey key: String, value: String?, table tableName: String?) -> String {
        if let bundle = languageBundle() {
            return bundle.localizedString(forKey: key, value: value, table: tableName)
        }else{
            return super.localizedString(forKey: key, value: value, table: tableName)
        }
    }
}

extension Bundle{
    
    func onLanguage(){
        //替换NSBundle.mainBundle()为自定义的BundleEx
        object_setClass(Bundle.main, BundleEx.self)
    }

    //当前语言的bundle
    func languageBundle()->Bundle?{
        return Languager.standardLanguager.currentLanguageBundle
    }
}


```

用法很简单, App启动的时候初始化

```swift
func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -> Bool {
        
        Languager.standardLanguager.initialize()
}
```

然后提供一个切换语言的ViewController就可以了.

```swift
import UIKit

class LanguageSelectViewController: UITableViewController {
    
    private var dateSource: [String] {
        return [Languager.availableLanguageIdentifier.english,
                Languager.availableLanguageIdentifier.malay,
                Languager.availableLanguageIdentifier.thai,
        ]
    }

    override func viewDidLoad() {
        super.viewDidLoad()
        
        tableView.contentInset = UIEdgeInsets(top: 12.0, left: 0, bottom: 0, right: 0)
        tableView.tableFooterView = UIView()
        tableView.separatorStyle = .none
        tableView.backgroundColor = UIColor.groupTableViewBackground
    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }

    // MARK: - Table view data source

    override func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }

    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return dateSource.count
    }

    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "LanguageCell", for: indexPath)
        
        let language = dateSource[indexPath.row]

        cell.textLabel?.text = Languager.standardLanguager.displayNameForLanguage(language)

        if let currentLanguage = Languager.standardLanguager.currentLanguage, currentLanguage == language {
            let imageView = UIImageView(image: UIImage(named: "check"))
            cell.accessoryView = imageView
        }

        return cell
    }
    
    override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        
        let cells = tableView.visibleCells
        cells.forEach { $0.accessoryView = nil }
        
        let cell = tableView.cellForRow(at: indexPath)
        let imageView = UIImageView(image: UIImage(named: "check"))
        cell?.accessoryView = imageView
    }
    
    @IBAction func cancelButtonTapped(_ sender: UIBarButtonItem) {
        
        dismissAnimated()
    }
    
    @IBAction func saveButtonTapped(_ sender: UIBarButtonItem) {
        
        guard let indexPath = tableView.indexPathForSelectedRow else { return }
        
        let language = self.dateSource[indexPath.row]
        
        Languager.standardLanguager.switchLanguage(language)
    }
    
}
```

看完了? 是不是很疑惑, 为什么没有image的国际化, 因为我们image不需要国际化 :smile:
